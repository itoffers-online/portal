<?php

declare(strict_types=1);

/*
 * This file is part of the Hire in Social project.
 *
 * (c) Norbert Orzechowicz <norbert@orzechowicz.pl>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace App\Offers\Form\Type\Offer;

use App\Offers\Validator\Constraints\NotContainsEmoji;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\CountryType;
use Symfony\Component\Form\Extension\Core\Type\HiddenType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Validator\Constraints\Callback;
use Symfony\Component\Validator\Constraints\GreaterThanOrEqual;
use Symfony\Component\Validator\Constraints\Length;
use Symfony\Component\Validator\Constraints\LessThanOrEqual;
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Component\Validator\Context\ExecutionContextInterface;

final class LocationType extends AbstractType
{
    public const LOCATION_REMOTE = "0";

    public const LOCATION_PARTIALLY_REMOTE = "1";

    public const LOCATION_AT_OFFICE = "2";

    public function buildForm(FormBuilderInterface $builder, array $options) : void
    {
        $builder
            ->add('type', ChoiceType::class, [
                'required' => true,
                'expanded' => true,
                'multiple' => false,
                'empty_data' => self::LOCATION_REMOTE,
                'choices' => [
                    self::LOCATION_REMOTE,
                    self::LOCATION_PARTIALLY_REMOTE,
                    self::LOCATION_AT_OFFICE,
                ],
            ])
            ->add('address', TextType::class, [
                'required' => false,
            ])
            ->add('country', CountryType::class, [
                'required' => false,
            ])
            ->add('city', TextType::class, [
                'required' => false,
                'constraints' => [
                    new Length(['min' => 3, 'max' => 512]),
                    new NotContainsEmoji(),
                ],
            ])
            ->add('lat', HiddenType::class, [
                'required' => false,
                'constraints' => [
                    new GreaterThanOrEqual(['value' => -90.0]),
                    new LessThanOrEqual(['value' => 90.0]),
                ],
            ])
            ->add('lng', HiddenType::class, [
                'required' => false,
                'constraints' => [
                    new GreaterThanOrEqual(['value' => -180.0]),
                    new LessThanOrEqual(['value' => 180.0]),
                ],
            ])
        ;
    }

    public function configureOptions(OptionsResolver $resolver) : void
    {
        parent::configureOptions($resolver); // TODO: Change the autogenerated stub
        $resolver->setDefault('constraints', [
            new Callback(
                [
                    'callback' => function ($data, ExecutionContextInterface $context) {
                        switch ($data['type']) {
                            case self::LOCATION_REMOTE:
                                break;
                            case self::LOCATION_PARTIALLY_REMOTE:
                            case self::LOCATION_AT_OFFICE:
                                if (!$data['city']) {
                                    $context->buildViolation((new NotBlank)->message)
                                        ->atPath('[city]')
                                        ->addViolation();
                                }
                                if (!$data['country']) {
                                    $context->buildViolation((new NotBlank)->message)
                                        ->atPath('[country]')
                                        ->addViolation();
                                }
                                if (!$data['address']) {
                                    $context->buildViolation((new NotBlank)->message)
                                        ->atPath('[address]')
                                        ->addViolation();
                                }

                                break;
                            default:
                                $context->buildViolation('Unknown address type {{ value }}.', ['{{ value }}' => $data])
                                    ->atPath('[city]')
                                    ->addViolation();

                                break;
                        }
                    },
                ]
            ),
        ]);
    }
}
